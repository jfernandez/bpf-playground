/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __FREPLACE_SKEL_H__
#define __FREPLACE_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct freplace {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *bss;
	} maps;
	struct {
		struct bpf_program *test_enable_stats;
	} progs;
	struct {
		struct bpf_link *test_enable_stats;
	} links;

#ifdef __cplusplus
	static inline struct freplace *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct freplace *open_and_load();
	static inline int load(struct freplace *skel);
	static inline int attach(struct freplace *skel);
	static inline void detach(struct freplace *skel);
	static inline void destroy(struct freplace *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
freplace__destroy(struct freplace *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
freplace__create_skeleton(struct freplace *obj);

static inline struct freplace *
freplace__open_opts(const struct bpf_object_open_opts *opts)
{
	struct freplace *obj;
	int err;

	obj = (struct freplace *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = freplace__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	freplace__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct freplace *
freplace__open(void)
{
	return freplace__open_opts(NULL);
}

static inline int
freplace__load(struct freplace *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct freplace *
freplace__open_and_load(void)
{
	struct freplace *obj;
	int err;

	obj = freplace__open();
	if (!obj)
		return NULL;
	err = freplace__load(obj);
	if (err) {
		freplace__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
freplace__attach(struct freplace *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
freplace__detach(struct freplace *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *freplace__elf_bytes(size_t *sz);

static inline int
freplace__create_skeleton(struct freplace *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "freplace";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "freplace.bss";
	s->maps[0].map = &obj->maps.bss;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "test_enable_stats";
	s->progs[0].prog = &obj->progs.test_enable_stats;
	s->progs[0].link = &obj->links.test_enable_stats;

	s->data = freplace__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *freplace__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0a\0\
\x01\0\xb7\x01\0\0\x01\0\0\0\x18\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xdb\x12\0\0\0\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x85\x10\0\0\xff\xff\xff\xff\xb7\0\0\
\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x66\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x0b\0\0\0\x12\0\x02\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x15\0\0\0\x11\0\x07\0\
\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x1b\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x18\0\
\0\0\0\0\0\0\x5d\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x08\0\0\0\
\0\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\x0a\0\0\0\x02\0\0\0\x04\x05\x03\0\
\x2e\x72\x65\x6c\x2e\x74\x65\x78\x74\0\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x5f\
\x63\x6f\x75\x6e\x74\0\x74\x65\x73\x74\x5f\x65\x6e\x61\x62\x6c\x65\x5f\x73\x74\
\x61\x74\x73\0\x2e\x62\x73\x73\0\x2e\x72\x65\x6c\x72\x61\x77\x5f\x74\x72\x61\
\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x2e\x6c\
\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\
\0\x66\x72\x65\x70\x6c\x61\x63\x65\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\
\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x75\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x43\x01\0\
\0\0\0\0\0\x85\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x05\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x30\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x09\0\
\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x20\x01\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x09\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x36\0\0\0\x01\0\0\0\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x30\x01\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x09\0\0\0\x04\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x5e\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x88\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x2d\0\0\0\x08\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\
\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x4f\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x40\x01\0\0\0\
\0\0\0\x03\0\0\0\0\0\0\0\x09\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x7d\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\0\0\0\0\0\0\0\x90\0\0\
\0\0\0\0\0\x01\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct freplace *freplace::open(const struct bpf_object_open_opts *opts) { return freplace__open_opts(opts); }
struct freplace *freplace::open_and_load() { return freplace__open_and_load(); }
int freplace::load(struct freplace *skel) { return freplace__load(skel); }
int freplace::attach(struct freplace *skel) { return freplace__attach(skel); }
void freplace::detach(struct freplace *skel) { freplace__detach(skel); }
void freplace::destroy(struct freplace *skel) { freplace__destroy(skel); }
const void *freplace::elf_bytes(size_t *sz) { return freplace__elf_bytes(sz); }
#endif /* __cplusplus */


#endif /* __FREPLACE_SKEL_H__ */
